记得每个功能模块记得写文档 写前端需要什么 后端需要什么 这样设计数据库比较方便
然后每个功能需要什么 参数数据 大概写写就好了 这样敲代码的时候就不会懵

复盘
  前端
表格 以及某个位置随大小变化 flex 以及 省略号
还有 复用组件组件内不要请求或者其他http操作，都交给父组件调用该组件的组件去
子组件只要传值或者接收值就好了，这样复用才简介
评论分层功能 根据树格式化 在show里有
分页器组件 原理以及应用
图片传服务器的fromdata类型
文本编辑器
滚动条
背景图attatch
打字效果
bus总线原理
组件复用时或者某部分值不用dataset来存直接对象自己它接受父传对象this获取对象属性就好了

后端
中间件

├── public 公共资源区域
├── src 开发代码区域
    ├── components #抽离组件封装区域
        ├── back #前端组件
        ├── end  #后端组件
        ├── user #用户组件
        └── common #共同使用组件
    ├── config #配置文件信息区域
    ├── http  #网络请求区域
        ├── blog #博客请求
        ├── comment #评论请求
        ├── img #图片上传请求
        ├── user #用户请求
        └── type #博客类型请求
    ├── router  #单页路由区域
    ├── utils.js #工具代码区域
    ├── App.vue #入口文件app模板
    ├── main.js #入口文件
    └── assets #图标,图片等文件


├── config   #配置信息区域
├── control #控制器区域
├── DB #数据库操作封装区域
├── modules # 模型区域
├── router # 路由区域
├── static # 静态资源区域
├── uploads # 文件下载区域
├── utls # 工具类区域
├── app.js # 入口文件



├── main.js
├── api
│   └── ... # 抽取出API请求
├── components
│   ├── App.vue
│   └── ...
└── store
    ├── index.js          # 我们组装模块并导出 store 的地方
    ├── actions.js        # 根级别的 action
    ├── mutations.js      # 根级别的 mutation
    └── modules
        ├── cart.js       # 购物车模块
        └── products.js   # 产品模块